!  DO NOT EDIT THIS FILE
!  But edit spaceparams.tmpl and/or makeincludes.F90
!  compile makeincludes.F90 and run the compilate
!  Compiling and running is taken care of by the Makefile
      real*8,dimension(:,:),    pointer :: x =>NULL()  ! [m]        x-coord. comp. grid (positive shoreward, perp. to coastline)
      real*8,dimension(:,:),    pointer :: y =>NULL()  ! [m]        y-coord. comp. grid
!      real*8,dimension(:),      pointer :: xz =>NULL()  ! [m]        x-coord. comp. grid (positive shoreward, perp. to coastline)
!      real*8,dimension(:),      pointer :: yz =>NULL()  ! [m]        y-coord. comp. grid
!      real*8,dimension(:),      pointer :: xu =>NULL()  ! [m]        x-coord. in u points
!      real*8,dimension(:),      pointer :: yv =>NULL()  ! [m]        y-coord. in v points
!      real*8,dimension(:,:),    pointer :: xw =>NULL()  ! [m]        world x-coordinates
!      real*8,dimension(:,:),    pointer :: yw =>NULL()  ! [m]        world y-coordinates
      real*8,pointer :: dx =>NULL()  ! [m]        grid size x-direction
      real*8,pointer :: dy =>NULL()  ! [m]        grid size y-direction
!      real*8,pointer :: xori =>NULL()  ! [m]        x-origin of grid in world coordinates
!      real*8,pointer :: yori =>NULL()  ! [m]        y-origin of grid in world coordinates
!      real*8,pointer :: alfa =>NULL()  ! [rad]      (deg on input) angle of grid w.r.t. East
!      real*8,pointer :: posdwn =>NULL()  ! [-]        depths defined positive downwards (1) or upwards(-1)
      integer,pointer :: nx =>NULL()  ! [-]        local number of grid cells x-direction
      integer,pointer :: ny =>NULL()  ! [-]        local number of grid cells y-direction
!      real*8,dimension(:,:),    pointer :: zb =>NULL()  ! [m]        bed level
!      real*8,dimension(:,:),    pointer :: zb0 =>NULL()  ! [m]        initial bed level
!      real*8,dimension(:),      pointer :: theta =>NULL()  ! [rad]      wave angles directional distribution
                                                 !            w.r.t. comp. x-axis
!      integer,pointer :: ntheta =>NULL()  ! [-]        number of wave direction bins
!      real*8,pointer :: dtheta =>NULL()  ! [rad]      wave direction bin size
!      real*8,pointer :: theta0 =>NULL()  ! [rad]      mean incident wave angle
!      real*8,dimension(:),      pointer :: cxsth =>NULL()  ! [-]        cos(theta)
!      real*8,dimension(:),      pointer :: sxnth =>NULL()  ! [-]        sin(theta)
!      real*8,dimension(:,:),    pointer :: thetamean =>NULL()  ! [rad]      mean wave angle
!      real*8,dimension(:,:),    pointer :: Fx =>NULL()  ! [N/m2]     wave force x-direction
!      real*8,dimension(:,:),    pointer :: Fy =>NULL()  ! [N/m2]     wave force y-direction
!      real*8,dimension(:,:),    pointer :: Sxy =>NULL()  ! [N/m]      radiation stress
!      real*8,dimension(:,:),    pointer :: Syy =>NULL()  ! [N/m]      radiation stress
!      real*8,dimension(:,:),    pointer :: Sxx =>NULL()  ! [N/m]      radiation stress
!      real*8,dimension(:,:),    pointer :: n =>NULL()  ! [-]        ratio group velocity/wave celerity
!      real*8,dimension(:,:),    pointer :: H =>NULL()  ! [m]        wave height
!      real*8,dimension(:,:,:),  pointer :: cgx =>NULL()  ! [m/s]      group velocity x-direction


!      real*8,dimension(:,:,:),  pointer :: cgy =>NULL()  ! [m/s]      group velocity y-direction
!      real*8,dimension(:,:,:),  pointer :: cx =>NULL()  ! [m/s]      wave celerity x-direction
!      real*8,dimension(:,:,:),  pointer :: cy =>NULL()  ! [m/s]      wave celerity y-direction
!      real*8,dimension(:,:,:),  pointer :: ctheta =>NULL()  ! [rad/s]    wave celerity theta-direction (refraction)
!      real*8,dimension(:,:,:),  pointer :: ee =>NULL()  ! [J/m2/rad] directionally distributed wave energy
!      real*8,dimension(:,:,:),  pointer :: thet =>NULL()  ! [rad]      wave angles
!      real*8,dimension(:,:,:),  pointer :: costhet =>NULL()  ! [-]        cos of wave angles
!      real*8,dimension(:,:,:),  pointer :: sinthet =>NULL()  ! [-]        sin of wave angles
!      real*8,dimension(:,:,:),  pointer :: sigt =>NULL()  ! [rad/s]    relative frequency
!      real*8,dimension(:,:,:),  pointer :: rr =>NULL()  ! [J/m2/rad] directionally distributed roller energy
!      real*8,dimension(:,:),    pointer :: k =>NULL()  ! [rad/m]    wave number
!      real*8,dimension(:,:),    pointer :: c =>NULL()  ! [m/s]      wave celerity
!      real*8,dimension(:,:),    pointer :: cg =>NULL()  ! [m/s]      group velocity
!      real*8,dimension(:,:),    pointer :: sigm =>NULL()  ! [rad/s]    mean frequency
!      real*8,dimension(:,:),    pointer :: hh =>NULL()  ! [m]        water depth
real*8,dimension(:,:),    pointer :: hzero =>NULL()  ! [m]        bathymetric water depth  % venleon
real*8,dimension(:,:),    pointer :: h =>NULL()  ! [m]        water depth  % venleon
!      real*8,dimension(:,:),    pointer :: zs =>NULL()  ! [m]        water level
real*8,dimension(:,:),    pointer :: eta =>NULL()  ! [m]        water level
real*8,dimension(:,:),    pointer :: etan =>NULL()  ! [m]        water level at next step
real*8,dimension(:,:),    pointer :: wet =>NULL()  ! [m]        wet label for each grid

!      real*8,dimension(:,:),    pointer :: zs0 =>NULL()  ! [m]        water level due to tide alone
!      real*8,dimension(:),      pointer :: tideinpt =>NULL()  ! [s]        input time of input tidal signal
!     real*8,dimension(:,:),    pointer :: tideinpz =>NULL()  ! [m]        input tidal signal
!      real*8,dimension(:,:),    pointer :: dzsdt =>NULL()  ! [m/s]      rate of change water level
!      real*8,dimension(:,:),    pointer :: dzbdt =>NULL()  ! [m/s]      rate of change bed level
!      real*8,dimension(:,:),    pointer :: uu =>NULL()  ! [m/s]      (GLM) x-velocity in u-points
!      real*8,dimension(:,:),    pointer :: vv =>NULL()  ! [m/s]      (GLM) y-velocity in v-points
!      real*8,dimension(:,:),    pointer :: qx =>NULL()  ! [m2/s]     x-discharge in u-points
!      real*8,dimension(:,:),    pointer :: qy =>NULL()  ! [m2/s]     y-discharge in u-points
!      real*8,dimension(:,:),    pointer :: sedero =>NULL()  ! [m]        cum. sedimentation/erosion
!      real*8,dimension(:,:),    pointer :: dcdx =>NULL()  ! [kg/m3/m]  concentration gradient x-dir.
!      real*8,dimension(:,:),    pointer :: dcdy =>NULL()  ! [kg/m3/m]  concentration gradient y-dir.
!      real*8,dimension(:,:),    pointer :: ui =>NULL()  ! [m/s]      incident bound wave velocity
!      real*8,dimension(:,:),    pointer :: E =>NULL()  ! [Nm/m2]    wave energy
!      real*8,dimension(:,:),    pointer :: R =>NULL()  ! [Nm/m2]    roller energy
!      real*8,dimension(:,:),    pointer :: urms =>NULL()  ! [m/s]      orbital velocity
!      real*8,dimension(:,:),    pointer :: D =>NULL()  ! [W/m2]     dissipation
!      real*8,dimension(:,:),    pointer :: ust =>NULL()  ! [m/s]      Stokes drift
!      real*8,dimension(:,:),    pointer :: tm =>NULL()  ! [rad]      mean wave direction
!      real*8,dimension(:,:),    pointer :: ueu =>NULL()  ! [m/s]      Eulerian mean velocity x-dir.
!      real*8,dimension(:,:),    pointer :: vev =>NULL()  ! [m/s]      Eulerian mean velocity y-dir.
!      real*8,dimension(:,:),    pointer :: vmagu =>NULL()  ! [m/s]      (GLM) velocity magnitude u-points
!      real*8,dimension(:,:),    pointer :: vmageu =>NULL()  ! [m/s]      (GLM) velocity magnitude u-points
!      real*8,dimension(:,:),    pointer :: vmagv =>NULL()  ! [m/s]      (GLM) velocity magnitude v-points
!      real*8,dimension(:,:),    pointer :: vmagev =>NULL()  ! [m/s]      (GLM) velocity magnitude v-points
      real*8,dimension(:,:),    pointer :: u =>NULL()  ! [m/s]      (GLM) x-velocity cell centre (for output)
real*8,dimension(:,:),    pointer :: un =>NULL()  ! [m/s]      (GLM) x-velocity cell centre (for output) next step
      real*8,dimension(:,:),    pointer :: v =>NULL()  ! [m/s]      (GLM) y-velocity cell centre (for output)
real*8,dimension(:,:),    pointer :: vn =>NULL()  ! [m/s]      (GLM) y-velocity cell centre (for output) next step
!      real*8,dimension(:,:),    pointer :: ue =>NULL()  ! [m/s]      Eulerian mean x-velocity cell centre (for output)
!      real*8,dimension(:,:),    pointer :: ve =>NULL()  ! [m/s]      Eulerian mean y-velocity cell centre (for output)
!      real*8,dimension(:,:),    pointer :: hold =>NULL()  ! [m]        water depth previous time step
!      integer,dimension(:,:),    pointer :: wetu =>NULL()  ! [-]        mask wet/dry u-points
!      integer,dimension(:,:),    pointer :: wetv =>NULL()  ! [-]        mask wet/dry v-points
!      integer,dimension(:,:),    pointer :: wetz =>NULL()  ! [-]        mask wet/dry eta-points
!      real*8,dimension(:,:),    pointer :: hu =>NULL()  ! [m]        water depth in u-points
!      real*8,dimension(:,:),    pointer :: hv =>NULL()  ! [m]        water depth in v-points
!      real*8,dimension(:,:),    pointer :: hum =>NULL()  ! [m]        water depth in u-points
!      real*8,dimension(:,:),    pointer :: hvm =>NULL()  ! [m]        water depth in v-points
!real*8 2  ceq    s%nx+1 s%ny+1 d ! [m3/m3]    depth-averaged equilibrium concentration
!      real*8,dimension(:,:),    pointer :: vmag =>NULL()  ! [m/s]      velocity magnitude in cell centre
!real*8 2  Su     d ! [m2/s]     sediment transport x-dir. (excluding pores)
!real*8 2  Sv     d ! [m2/s]     sediment transport y-dir. (excluding pores)
!real*8 2  Ts     d ! [s]        adaptation time scale
!real*8 2  cc     d ! [m3/m3]    depth-averaged concentration
      real*8,dimension(:,:,:),  pointer :: ccg =>NULL()  ! [m3/m3]    depth-averaged concentration for each sediment fraction
      real*8,dimension(:,:),    pointer :: uwf =>NULL()  ! [m/s]      x-comp. Stokes drift
      real*8,dimension(:,:),    pointer :: vwf =>NULL()  ! [m/s]      y-comp. Stokes drift
      real*8,dimension(:,:),    pointer :: ustr =>NULL()  ! [m/s]      return flow due to roller
      real*8,dimension(:,:),    pointer :: usd =>NULL()  ! [m/s]      return flow due to roller after breaker delay
      real*8,dimension(:),      pointer :: bi =>NULL()  ! [m]        incoming bound long wave
      real*8,dimension(:,:),    pointer :: DR =>NULL()  ! [W/m2]     roller energy dissipation
      real*8,dimension(:,:),    pointer :: umean =>NULL()  ! [m/s]      longterm mean velocity at bnds
      integer,pointer :: vardx =>NULL()  ! [-]        0 = uniform grid size, 1 = variable grid size
      real*8,dimension(:,:),    pointer :: vu =>NULL()  ! [m/s]      y velocity in u points
      real*8,dimension(:,:),    pointer :: uv =>NULL()  ! [m/s]          x velocity in v points
      real*8,dimension(:,:,:,:),pointer :: graindistr =>NULL()  ! [-]     fractional graindistribution for sediment classes
      real*8,dimension(:),      pointer :: D50 =>NULL()  ! [m]        D50 grain diameters for all sediment classses
      real*8,dimension(:),      pointer :: D90 =>NULL()  ! [m]        D90 grain diameters for all sediment classses
      real*8,dimension(:),      pointer :: sedcal =>NULL()  ! [-]        equilibrium sediment concentartion factor for each sediment class
      real*8,dimension(:,:,:),  pointer :: Tsg =>NULL()  ! [s]        sediment response time for each sediment class
      real*8,dimension(:,:,:),  pointer :: Sug =>NULL()  ! [m2/s]     sediment transport x-dir. for each sediment class (excluding pores)
      real*8,dimension(:,:,:),  pointer :: Svg =>NULL()  ! [m2/s]     sediment transport y-dir. for each sediment class (excluding pores)
      real*8,dimension(:,:,:),  pointer :: ceqg =>NULL()  ! [m3/m3]    depth-averaged equilibrium concentration for each sediment class
      real*8,dimension(:,:),    pointer :: ua =>NULL()  ! [m/s]      time averaged flow velocity due to wave assymetry
      real*8,dimension(:,:),    pointer :: BR =>NULL()  ! [-]        maximum wave surface slope used in roller dissipation formulation
      real*8,dimension(:,:),    pointer :: kb =>NULL()  ! [m^2/s^2]  near bed turbulence intensity due to depth induces breaking
      real*8,dimension(:,:),    pointer :: Tbore =>NULL()  ! [s]        wave period interval associated with breaking induced turbulence
      real*8,dimension(:,:),    pointer :: uon =>NULL()  ! [m/s]      onshore directed peak orbital velocity
      real*8,dimension(:,:),    pointer :: uoff =>NULL()  ! [m/s]      offshore directed peak orbital velocity
      real*8,dimension(:,:),    pointer :: dzav =>NULL()  ! [m]        total bed level change due to avalanching
      real*8,dimension(:,:),    pointer :: maxzs =>NULL()  ! [m]        maximum elevation in simulation
      real*8,dimension(:,:),    pointer :: minzs =>NULL()  ! [m]        minimum elevation in simulation
      real*8,dimension(:,:),    pointer :: L1 =>NULL()  ! for subroutine dispersion
      real*8,dimension(:,:),    pointer :: dzlayer =>NULL()  ! [m] initial thickness sand layer on top of hard layer
!      real*8  2  uau s%nx+1 s%ny+1 d ! [m/s] advection velocity due to wave asymmetry (u-dir)
!      real*8  2  uav s%nx+1 s%ny+1 d ! [m/s] advection velocity due to wave asymmetry (v-dir)
      real*8,dimension(:,:),    pointer :: Sk =>NULL()  ! [-] skewness of short waves
      real*8,dimension(:,:),    pointer :: As =>NULL()  ! [-] asymmetry of short waves
      real*8,dimension(:,:),    pointer :: Fimpact =>NULL()  ! [N/m^2]    Force on dune face
!directions for vi vim: filetype=fortran : syntax=fortran
